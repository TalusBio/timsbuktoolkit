name: Release

on:
  push:
    tags:
      - 'v[0-9]+.*' # Trigger on version tags

env:
  CARGO_TERM_COLOR: always
  # Define the binaries to package
  # TODO: use our taskfile to centralize the build
  RELEASE_BINARIES: timsseek timsquery timsseek_rts

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  linux-builds:
    needs: create-release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-gnu
          - aarch64-unknown-linux-musl
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          targets: ${{ matrix.target }}

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Install cross-compilation tools
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools clang gcc-aarch64-linux-gnu
          sudo ln -s /usr/bin/musl-gcc /usr/bin/x86_64-linux-musl-gcc
          sudo ln -s /usr/bin/musl-gcc /usr/bin/aarch64-linux-musl-gcc

      - name: Configure cargo
        run: |
          mkdir -p .cargo
          cat > .cargo/config.toml << EOF
          [target.${{ matrix.target }}]
          EOF
          if [[ "${{ matrix.target }}" == *"musl"* ]]; then
            echo 'linker = "rust-lld"' >> .cargo/config.toml
          fi
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            echo 'linker = "aarch64-linux-gnu-gcc"' >> .cargo/config.toml
          fi

      - name: Build
        run: |
            rustup target add ${{ matrix.target }}
            for binary in $RELEASE_BINARIES; do
                cargo build --release --bin $binary --target ${{ matrix.target }}
            done

      - name: Prepare binaries
        run: |
          mkdir artifacts
          for binary in $RELEASE_BINARIES; do
            cp "target/${{ matrix.target }}/release/$binary" artifacts/
          done
          cd artifacts
          tar czf ../${{ matrix.target }}.tar.gz *

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ matrix.target }}.tar.gz
          asset_name: ${{ matrix.target }}.tar.gz
          asset_content_type: application/gzip

  macos-builds:
    needs: create-release
    runs-on: macos-latest
    strategy:
      matrix:
        target:
          - x86_64-apple-darwin
          - aarch64-apple-darwin
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          targets: ${{ matrix.target }}

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Build
        run: |
            rustup target add ${{ matrix.target }}
            for binary in $RELEASE_BINARIES; do
                cargo build --release --bin $binary --target ${{ matrix.target }}
            done

      - name: Prepare binaries
        run: |
          mkdir artifacts
          for binary in $RELEASE_BINARIES; do
            cp "target/${{ matrix.target }}/release/$binary" artifacts/
          done
          cd artifacts
          tar czf ../${{ matrix.target }}.tar.gz *

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ matrix.target }}.tar.gz
          asset_name: ${{ matrix.target }}.tar.gz
          asset_content_type: application/gzip

  windows-builds:
    needs: create-release
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          targets: x86_64-pc-windows-msvc

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          key: x86_64-pc-windows-msvc

      - name: Build
        run: |
            rustup target add x86_64-pc-windows-msvc
            for binary in $RELEASE_BINARIES; do
                cargo build --release --bin $binary --target x86_64-pc-windows-msvc
            done

      - name: Prepare binaries
        shell: bash
        run: |
          mkdir artifacts
          for binary in $RELEASE_BINARIES; do
            cp "target/x86_64-pc-windows-msvc/release/$binary.exe" artifacts/
          done
          cd artifacts
          tar czf ../x86_64-pc-windows-msvc.tar.gz *

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: x86_64-pc-windows-msvc.tar.gz
          asset_name: x86_64-pc-windows-msvc.tar.gz
          asset_content_type: application/gzip